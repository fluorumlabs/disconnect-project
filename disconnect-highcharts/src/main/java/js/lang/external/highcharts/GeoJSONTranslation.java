package js.lang.external.highcharts;

import com.github.fluorumlabs.disconnect.core.annotations.Import;
import com.github.fluorumlabs.disconnect.core.annotations.NpmPackage;
import java.lang.String;
import javax.annotation.Nullable;
import js.lang.Any;
import org.teavm.jso.JSProperty;

/**
 * Describes the map projection and transformations applied to a portion of a
 * map.
 *
 */
@NpmPackage(
    name = "highcharts",
    version = "^8.1.2"
)
@Import(
    module = "highcharts/es-modules/masters/highcharts.src.js"
)
public interface GeoJSONTranslation extends Any {
  /**
   * The coordinate reference system used to generate this portion of the map.
   *
   */
  @JSProperty("crs")
  String getCrs();

  /**
   * The coordinate reference system used to generate this portion of the map.
   *
   */
  @JSProperty("crs")
  void setCrs(String value);

  /**
   * Define the portion of the map that this defintion applies to. Defined as
   * a GeoJSON polygon feature object, with <code>type</code> and <code>coordinates</code>
   * properties.
   *
   */
  @JSProperty("hitZone")
  @Nullable
  Dictionary<Any> getHitZone();

  /**
   * Define the portion of the map that this defintion applies to. Defined as
   * a GeoJSON polygon feature object, with <code>type</code> and <code>coordinates</code>
   * properties.
   *
   */
  @JSProperty("hitZone")
  void setHitZone(@Nullable Dictionary<Any> value);

  /**
   * Property for internal use for maps generated by Highsoft.
   *
   */
  @JSProperty("jsonmarginX")
  double getJsonmarginX();

  /**
   * Property for internal use for maps generated by Highsoft.
   *
   */
  @JSProperty("jsonmarginX")
  void setJsonmarginX(double value);

  /**
   * Property for internal use for maps generated by Highsoft.
   *
   */
  @JSProperty("jsonmarginY")
  double getJsonmarginY();

  /**
   * Property for internal use for maps generated by Highsoft.
   *
   */
  @JSProperty("jsonmarginY")
  void setJsonmarginY(double value);

  /**
   * Property for internal use for maps generated by Highsoft.
   *
   */
  @JSProperty("jsonres")
  double getJsonres();

  /**
   * Property for internal use for maps generated by Highsoft.
   *
   */
  @JSProperty("jsonres")
  void setJsonres(double value);

  /**
   * Specifies clockwise rotation of the coordinates after the projection, but
   * before scaling and panning. Defined in radians, relative to the
   * coordinate system origin.
   *
   */
  @JSProperty("rotation")
  double getRotation();

  /**
   * Specifies clockwise rotation of the coordinates after the projection, but
   * before scaling and panning. Defined in radians, relative to the
   * coordinate system origin.
   *
   */
  @JSProperty("rotation")
  void setRotation(double value);

  /**
   * The scaling factor applied to the projected coordinates.
   *
   */
  @JSProperty("scale")
  double getScale();

  /**
   * The scaling factor applied to the projected coordinates.
   *
   */
  @JSProperty("scale")
  void setScale(double value);

  /**
   * Property for internal use for maps generated by Highsoft.
   *
   */
  @JSProperty("xoffset")
  double getXoffset();

  /**
   * Property for internal use for maps generated by Highsoft.
   *
   */
  @JSProperty("xoffset")
  void setXoffset(double value);

  /**
   * X offset of projected coordinates after scaling.
   *
   */
  @JSProperty("xpan")
  double getXpan();

  /**
   * X offset of projected coordinates after scaling.
   *
   */
  @JSProperty("xpan")
  void setXpan(double value);

  /**
   * Property for internal use for maps generated by Highsoft.
   *
   */
  @JSProperty("yoffset")
  double getYoffset();

  /**
   * Property for internal use for maps generated by Highsoft.
   *
   */
  @JSProperty("yoffset")
  void setYoffset(double value);

  /**
   * Y offset of projected coordinates after scaling.
   *
   */
  @JSProperty("ypan")
  double getYpan();

  /**
   * Y offset of projected coordinates after scaling.
   *
   */
  @JSProperty("ypan")
  void setYpan(double value);

  static Builder builder() {
    return new Builder();
  }

  final class Builder {
    private final GeoJSONTranslation object = Any.empty();

    private Builder() {
    }

    public GeoJSONTranslation build() {
      return object;
    }

    /**
     * The coordinate reference system used to generate this portion of the map.
     *
     */
    public Builder crs(String value) {
      object.setCrs(value);
      return this;
    }

    /**
     * Define the portion of the map that this defintion applies to. Defined as
     * a GeoJSON polygon feature object, with <code>type</code> and <code>coordinates</code>
     * properties.
     *
     */
    public Builder hitZone(@Nullable Dictionary<Any> value) {
      object.setHitZone(value);
      return this;
    }

    /**
     * Property for internal use for maps generated by Highsoft.
     *
     */
    public Builder jsonmarginX(double value) {
      object.setJsonmarginX(value);
      return this;
    }

    /**
     * Property for internal use for maps generated by Highsoft.
     *
     */
    public Builder jsonmarginY(double value) {
      object.setJsonmarginY(value);
      return this;
    }

    /**
     * Property for internal use for maps generated by Highsoft.
     *
     */
    public Builder jsonres(double value) {
      object.setJsonres(value);
      return this;
    }

    /**
     * Specifies clockwise rotation of the coordinates after the projection, but
     * before scaling and panning. Defined in radians, relative to the
     * coordinate system origin.
     *
     */
    public Builder rotation(double value) {
      object.setRotation(value);
      return this;
    }

    /**
     * The scaling factor applied to the projected coordinates.
     *
     */
    public Builder scale(double value) {
      object.setScale(value);
      return this;
    }

    /**
     * Property for internal use for maps generated by Highsoft.
     *
     */
    public Builder xoffset(double value) {
      object.setXoffset(value);
      return this;
    }

    /**
     * X offset of projected coordinates after scaling.
     *
     */
    public Builder xpan(double value) {
      object.setXpan(value);
      return this;
    }

    /**
     * Property for internal use for maps generated by Highsoft.
     *
     */
    public Builder yoffset(double value) {
      object.setYoffset(value);
      return this;
    }

    /**
     * Y offset of projected coordinates after scaling.
     *
     */
    public Builder ypan(double value) {
      object.setYpan(value);
      return this;
    }
  }
}

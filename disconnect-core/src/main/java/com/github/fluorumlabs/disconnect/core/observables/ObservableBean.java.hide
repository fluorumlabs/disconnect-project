package com.github.fluorumlabs.disconnect.zero.observable;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.constraints.NotNull;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Consumer;


public class ObservableBean<VALUE> extends ObservableValue<VALUE> {
    private Class<VALUE> valueClass;
    private Map<String, BeanPropertyDescriptor<VALUE, ?>> propertyMap;
    private boolean sameField = false;

    public static <VALUE> ObservableBean<VALUE> of(@NotNull VALUE value) {
        @NotNull VALUE nonNullValue = Objects.requireNonNull(value, "value must not be null");
        return new ObservableBean<>((Class<VALUE>) nonNullValue.getClass(), value);
    }

    public static <VALUE> ObservableBean<VALUE> of(Class<VALUE> valueClass) {
        try {
            return new ObservableBean<>(valueClass, valueClass.newInstance());
        } catch (InstantiationException | IllegalAccessException e) {
            throw new IllegalArgumentException("Cannot instantiate "+valueClass.getSimpleName(), e);
        }
    }

    ObservableBean(Class<VALUE> valueClass, VALUE value) {
        super(value);
        this.valueClass = valueClass;

        propertyMap = BeanPropertyDescriptor.buildPropertyMap(valueClass);
    }

    ObservableBean(Class<VALUE> valueClass) {
        this(valueClass, null);
    }

    Map<String, BeanPropertyDescriptor<VALUE, ?>> getPropertyMap() {
        return propertyMap;
    }

    public Class<VALUE> getValueClass() {
        return valueClass;
    }

    public <PROPERTY_VALUE> ObservableProperty<VALUE, PROPERTY_VALUE> getProperty(String propertyName) {
        BeanPropertyDescriptor<VALUE, PROPERTY_VALUE> descriptor = (BeanPropertyDescriptor<VALUE, PROPERTY_VALUE>) propertyMap.get(propertyName);
        if (descriptor == null) {
            throw new IllegalArgumentException("Property " + propertyName + " not found in " + getValueClass().getSimpleName());
        }
        ObservableProperty<VALUE, PROPERTY_VALUE> observable = new ObservableProperty<>(descriptor.itemType, this, propertyName);
        acceptImpl(v -> {
            if (get() != null) {
                observable.pushNewValue(descriptor.getter.apply(get()));
            }
        });
        observable.accept(v -> {
            descriptor.setter.accept(get(), v);
            markAsDirty();
        });
        return observable;
    }

    public Validated<VALUE> whenValid() {
        return whenValid(Validation.buildDefaultValidatorFactory().getValidator());
    }

    public Validated<VALUE> whenValid(Validator validator) {
        Validated<VALUE> forkedObserver = new Validated<>();
        acceptImpl(value -> pushValidatedMessage(forkedObserver, value, validator));
        return forkedObserver;
    }

    protected void pushValidatedMessage(Validated<VALUE> observable, VALUE value, Validator validator) {
        observable.pushNewValue(Pair.of(value, validator.validate(value)));
    }

    boolean isSameField() {
        return sameField;
    }

    void setSameField(boolean sameField) {
        this.sameField = sameField;
    }

    public static class Validated<VALUE> extends ObservableBase<Pair<VALUE, Set<ConstraintViolation<Object>>>> {
        public Observable<VALUE> then() {
            Observable<VALUE> observable = new Observable<>();
            acceptImpl(valueBooleanPair -> {
                if (valueBooleanPair.getValueB().isEmpty()) {
                    observable.pushNewValue(valueBooleanPair.getValueA(), true);
                }
            });
            return observable;
        }

        public Validated<VALUE> then(Consumer<VALUE> consumer) {
            acceptImpl(valueBooleanPair -> {
                if (valueBooleanPair.getValueB().isEmpty()) {
                    consumer.accept(valueBooleanPair.getValueA());
                }
            });
            return this;
        }

        public BiObservable<VALUE, Set<ConstraintViolation<Object>>> orElse() {
            BiObservable<VALUE, Set<ConstraintViolation<Object>>> observable = new BiObservable<>();
            acceptImpl(valueBooleanPair -> {
                if (!valueBooleanPair.getValueB().isEmpty()) {
                    observable.pushNewValue(valueBooleanPair, true);
                }
            });
            return observable;
        }

        public Validated<VALUE> orElse(BiConsumer<VALUE, Set<ConstraintViolation<Object>> > consumer) {
            acceptImpl(valueBooleanPair -> {
                if (!valueBooleanPair.getValueB().isEmpty()) {
                    consumer.accept(valueBooleanPair.getValueA(), valueBooleanPair.getValueB());
                }
            });
            return this;
        }

        @Override
        boolean equalFunction(Pair<VALUE, Set<ConstraintViolation<Object>>> a, Pair<VALUE, Set<ConstraintViolation<Object>>> b) {
            return false;
        }
    }
}

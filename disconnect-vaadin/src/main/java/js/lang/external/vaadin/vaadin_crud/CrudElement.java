package js.lang.external.vaadin.vaadin_crud;

import com.github.fluorumlabs.disconnect.core.annotations.Import;
import com.github.fluorumlabs.disconnect.core.annotations.NpmPackage;
import js.lang.Any;
import js.lang.Unknown;
import js.lang.external.polymer.PolymerElement;
import js.lang.external.vaadin.vaadin_element_mixin.ElementMixin;
import js.lang.external.vaadin.vaadin_themable_mixin.ThemableMixin;
import org.teavm.jso.JSIndexer;
import org.teavm.jso.JSProperty;

import javax.annotation.Nullable;

/**
 * <code>&lt;vaadin-crud&gt;</code> is a Web Component for <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> operations.
 *
 * <h3>Quick Start</h3>
 * Assign an array to the <a href="#/elements/vaadin-crud#property-items"><code>items</code></a> property.
 *
 * A grid and an editor will be automatically generated and configured based on the data structure provided.
 *
 * <h4>Example:</h4>
 * <pre><code class="language-html">&lt;vaadin-crud items='[{&quot;name&quot;: &quot;John&quot;, &quot;surname&quot;: &quot;Lennon&quot;, &quot;role&quot;: &quot;singer&quot;},
 *                      {&quot;name&quot;: &quot;Ringo&quot;, &quot;surname&quot;: &quot;Starr&quot;, &quot;role&quot;: &quot;drums&quot;}]'&gt;&lt;/vaadin-crud&gt;
 * </code></pre>
 * <h3>Data Provider Function</h3>
 * Otherwise, you can provide a <a href="#/elements/vaadin-crud#property-dataProvider"><code>dataProvider</code></a> function.
 *
 * <h4>Example:</h4>
 * <pre><code class="language-html">&lt;vaadin-crud&gt;&lt;/vaadin-crud&gt;
 * </code></pre>
 * <pre><code class="language-js">const crud = document.querySelector('vaadin-crud');
 * const users = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'}, ...];
 * crud.dataProvider = function(params, callback) {
 *   const chunk = users.slice(params.page * params.pageSize, params.page * params.pageSize + params.pageSize);
 *   callback(chunk, people.length);
 * };
 * </code></pre>
 * NOTE: The autogenerated editor only supports string types. If you need to handle special cases
 * customizing the editor is discussed below.
 *
 * <h3>Customization</h3>
 * Alternatively you can fully configure the component by using <code>slot</code> names.
 *
 * <table>
 * <thead>
 * <tr><th>Slot name</th><th>Description</th></tr>
 * </thead>
 * <tbody>
 * <tr><td><code>grid</code></td><td>To replace the autogenerated grid with a custom one.</td></tr>
 * <tr><td><code>form</code></td><td>To replace the autogenerated form.</td></tr>
 * <tr><td><code>toolbar</code></td><td>To replace the toolbar content. Add an element with the attribure <code>new-button</code> for the new item action.</td></tr>
 * </tbody>
 * </table>
 * <h4>Example:</h4>
 * <pre><code class="language-html">&lt;vaadin-crud items='[{&quot;name&quot;: &quot;John&quot;, &quot;surname&quot;: &quot;Lennon&quot;, &quot;role&quot;: &quot;singer&quot;},
 *                      {&quot;name&quot;: &quot;Ringo&quot;, &quot;surname&quot;: &quot;Starr&quot;, &quot;role&quot;: &quot;drums&quot;}]'&gt;
 *
 *  &lt;vaadin-grid slot=&quot;grid&quot;&gt;
 *   &lt;vaadin-crud-edit-column&gt;&lt;/vaadin-crud-edit-column&gt;
 *   &lt;vaadin-grid-column&gt;
 *    &lt;template class=&quot;header&quot;&gt;Name&lt;/template&gt;&lt;template&gt;[[item.name]]&lt;/template&gt;
 *   &lt;/vaadin-grid-column&gt;
 *   &lt;vaadin-grid-column&gt;
 *    &lt;template class=&quot;header&quot;&gt;Surname&lt;/template&gt;&lt;template&gt;[[item.surname]]&lt;/template&gt;
 *   &lt;/vaadin-grid-column&gt;
 *  &lt;/vaadin-grid&gt;
 *
 *  &lt;vaadin-form-layout slot=&quot;form&quot;&gt;
 *   &lt;vaadin-text-field label=&quot;First&quot; path=&quot;name&quot;&gt;&lt;/vaadin-text-field&gt;
 *   &lt;vaadin-text-field label=&quot;Surname&quot; path=&quot;surname&quot;&gt;&lt;/vaadin-text-field&gt;
 *  &lt;/vaadin-form-layout&gt;
 *
 *  &lt;div slot=&quot;footer&quot;&gt;Total singers: [[size]]&lt;/div&gt;
 *
 *  &lt;button slot=&quot;new&quot;&gt;New singer&lt;/button&gt;
 * &lt;/vaadin-crud&gt;
 * </code></pre>
 * <h3>Helpers</h3>
 * The following elements are used to autoconfigure the grid and the editor
 *
 * <ul>
 * <li><a href="#/elements/vaadin-crud-grid"><code>&lt;vaadin-crud-grid&gt;</code></a></li>
 * <li><a href="#/elements/vaadin-crud-edit-column"><code>&lt;vaadin-crud-edit-column&gt;</code></a></li>
 * <li><a href="#/elements/vaadin-crud-form"><code>&lt;vaadin-crud-form&gt;</code></a></li>
 * </ul>
 * <h3>Styling</h3>
 * The following shadow DOM parts are available for styling:
 *
 * <table>
 * <thead>
 * <tr><th>Part name</th><th>Description</th></tr>
 * </thead>
 * <tbody>
 * <tr><td><code>toolbar</code></td><td>Toolbar container at the bottom. By default it contains the the <code>new</code> button</td></tr>
 * </tbody>
 * </table>
 * The following custom properties are available:
 *
 * <table>
 * <thead>
 * <tr><th>Custom Property</th><th>Description</th><th>Default</th></tr>
 * </thead>
 * <tbody>
 * <tr><td>--vaadin-crud-editor-max-height</td><td>max height of editor when opened on the bottom</td><td>40%</td></tr>
 * <tr><td>--vaadin-crud-editor-max-width</td><td>max width of editor when opened on the side</td><td>40%</td></tr>
 * </tbody>
 * </table>
 * See <a href="https://github.com/vaadin/vaadin-themable-mixin/wiki">ThemableMixin â€“ how to apply styles for shadow parts</a>
 *
 */
@NpmPackage(
    name = "@vaadin/vaadin-crud",
    version = "^1.3.0-alpha2"
)
@Import(
    symbols = {"CrudElement as CrudElement_CrudElement"},
    module = "@vaadin/vaadin-crud/src/vaadin-crud.js"
)
@Import(
    module = "@vaadin/vaadin-crud/src/vaadin-crud.js"
)
public interface CrudElement extends PolymerElement, ThemableMixin, ElementMixin {
  /**
   * An array containing the items which will be stamped to the column template instances.
   *
   */
  @JSProperty("items")
  @Nullable
  Items[] getItems();

  /**
   * An array containing the items which will be stamped to the column template instances.
   *
   */
  @JSProperty("items")
  void setItems(Items... value);

  /**
   * The item being edited in the dialog.
   *
   */
  @JSProperty("editedItem")
  @Nullable
  EditedItem getEditedItem();

  /**
   * The item being edited in the dialog.
   *
   */
  @JSProperty("editedItem")
  void setEditedItem(@Nullable EditedItem value);

  /**
   * Sets how editor will be presented on desktop screen.
   *
   * Accepted values are:
   *
   * <ul>
   * <li>`` (default) - form will open as overlay</li>
   * <li><code>bottom</code> - form will open below the grid</li>
   * <li><code>aside</code> - form will open on the grid side (<em>right</em>, if lft and <em>left</em> if rtl)</li>
   * </ul>
   */
  @JSProperty("editorPosition")
  CrudEditorPosition getEditorPosition();

  /**
   * Sets how editor will be presented on desktop screen.
   *
   * Accepted values are:
   *
   * <ul>
   * <li>`` (default) - form will open as overlay</li>
   * <li><code>bottom</code> - form will open below the grid</li>
   * <li><code>aside</code> - form will open on the grid side (<em>right</em>, if lft and <em>left</em> if rtl)</li>
   * </ul>
   */
  @JSProperty("editorPosition")
  void setEditorPosition(CrudEditorPosition value);

  /**
   * Enables user to click on row to edit it.
   * Note: When enabled, autogenerated grid won't show the edit column.
   *
   */
  @JSProperty("editOnClick")
  boolean getEditOnClick();

  /**
   * Enables user to click on row to edit it.
   * Note: When enabled, autogenerated grid won't show the edit column.
   *
   */
  @JSProperty("editOnClick")
  void setEditOnClick(boolean value);

  /**
   * Function that provides items lazily. Receives arguments <code>params</code>, <code>callback</code>
   *
   * <code>params.page</code> Requested page index
   * <code>params.pageSize</code> Current page size
   * <code>params.filters</code> Currently applied filters
   * <code>params.sortOrders</code> Currently applied sorting orders
   *
   * <code>callback(items, size)</code> Callback function with arguments:
   *
   * <ul>
   * <li><code>items</code> Current page of items</li>
   * <li><code>size</code> Total number of items</li>
   * </ul>
   */
  @JSProperty("dataProvider")
  @Nullable
  CrudDataProvider getDataProvider();

  /**
   * Function that provides items lazily. Receives arguments <code>params</code>, <code>callback</code>
   *
   * <code>params.page</code> Requested page index
   * <code>params.pageSize</code> Current page size
   * <code>params.filters</code> Currently applied filters
   * <code>params.sortOrders</code> Currently applied sorting orders
   *
   * <code>callback(items, size)</code> Callback function with arguments:
   *
   * <ul>
   * <li><code>items</code> Current page of items</li>
   * <li><code>size</code> Total number of items</li>
   * </ul>
   */
  @JSProperty("dataProvider")
  void setDataProvider(@Nullable CrudDataProvider value);

  /**
   * Disable filtering when grid is autoconfigured.
   *
   */
  @JSProperty("noFilter")
  boolean getNoFilter();

  /**
   * Disable filtering when grid is autoconfigured.
   *
   */
  @JSProperty("noFilter")
  void setNoFilter(boolean value);

  /**
   * Disable sorting when grid is autoconfigured.
   *
   */
  @JSProperty("noSort")
  boolean getNoSort();

  /**
   * Disable sorting when grid is autoconfigured.
   *
   */
  @JSProperty("noSort")
  void setNoSort(boolean value);

  /**
   * Remove grid headers when it is autoconfigured.
   *
   */
  @JSProperty("noHead")
  boolean getNoHead();

  /**
   * Remove grid headers when it is autoconfigured.
   *
   */
  @JSProperty("noHead")
  void setNoHead(boolean value);

  /**
   * A comma-separated list of fields to include in the generated grid and the generated editor.
   *
   * It can be used to explicitly define the field order.
   *
   * When it is defined <a href="#/elements/vaadin-crud#property-exclude"><code>exclude</code></a> is ignored.
   *
   * Default is undefined meaning that all properties in the object should be mapped to fields.
   *
   */
  @JSProperty("include")
  @Nullable
  String getInclude();

  /**
   * A comma-separated list of fields to include in the generated grid and the generated editor.
   *
   * It can be used to explicitly define the field order.
   *
   * When it is defined <a href="#/elements/vaadin-crud#property-exclude"><code>exclude</code></a> is ignored.
   *
   * Default is undefined meaning that all properties in the object should be mapped to fields.
   *
   */
  @JSProperty("include")
  void setInclude(@Nullable String value);

  /**
   * A comma-separated list of fields to be excluded from the generated grid and the generated editor.
   *
   * When <a href="#/elements/vaadin-crud#property-include"><code>include</code></a> is defined, this parameter is ignored.
   *
   * Default is to exclude all private fields (those properties starting with underscore)
   *
   */
  @JSProperty("exclude")
  @Nullable
  String getExclude();

  /**
   * A comma-separated list of fields to be excluded from the generated grid and the generated editor.
   *
   * When <a href="#/elements/vaadin-crud#property-include"><code>include</code></a> is defined, this parameter is ignored.
   *
   * Default is to exclude all private fields (those properties starting with underscore)
   *
   */
  @JSProperty("exclude")
  void setExclude(@Nullable String value);

  /**
   * Reflects the opened status of the editor.
   *
   */
  @JSProperty("editorOpened")
  boolean getEditorOpened();

  /**
   * Reflects the opened status of the editor.
   *
   */
  @JSProperty("editorOpened")
  void setEditorOpened(boolean value);

  /**
   * Number of items in the data set which is reported by the grid.
   * Typically it reflects the number of filtered items displayed in the grid.
   *
   */
  @JSProperty("size")
  double getSize();

  /**
   * The object used to localize this component.
   * For changing the default localization, change the entire
   * <em>i18n</em> object or just the property you want to modify.
   *
   * The object has the following JSON structure and default values:
   *
   * <pre><code>     {
   *        newItem: 'New item',
   *        editItem: 'Edit item',
   *        saveItem: 'Save',
   *        cancel: 'Cancel',
   *        deleteItem: 'Delete...',
   *        editLabel: 'Edit',
   *        confirm: {
   *          delete: {
   *            title: 'Confirm delete',
   *            content: 'Are you sure you want to delete the selected item? This action cannot be undone.',
   *            button: {
   *              confirm: 'Delete',
   *              dismiss: 'Cancel'
   *            }
   *          },
   *          cancel: {
   *            title: 'Unsaved changes',
   *            content: 'There are unsaved modifications to the item.',
   *            button: {
   *              confirm: 'Discard',
   *              dismiss: 'Continue editing'
   *            }
   *          }
   *        }
   *      }
   * </code></pre>
   */
  @JSProperty("i18n")
  CrudI18n getI18n();

  /**
   * The object used to localize this component.
   * For changing the default localization, change the entire
   * <em>i18n</em> object or just the property you want to modify.
   *
   * The object has the following JSON structure and default values:
   *
   * <pre><code>     {
   *        newItem: 'New item',
   *        editItem: 'Edit item',
   *        saveItem: 'Save',
   *        cancel: 'Cancel',
   *        deleteItem: 'Delete...',
   *        editLabel: 'Edit',
   *        confirm: {
   *          delete: {
   *            title: 'Confirm delete',
   *            content: 'Are you sure you want to delete the selected item? This action cannot be undone.',
   *            button: {
   *              confirm: 'Delete',
   *              dismiss: 'Cancel'
   *            }
   *          },
   *          cancel: {
   *            title: 'Unsaved changes',
   *            content: 'There are unsaved modifications to the item.',
   *            button: {
   *              confirm: 'Discard',
   *              dismiss: 'Continue editing'
   *            }
   *          }
   *        }
   *      }
   * </code></pre>
   */
  @JSProperty("i18n")
  void setI18n(CrudI18n value);

  void ready();

  interface Items extends Any {
    @JSIndexer
    Unknown /* unknown */ get(String key);

    @JSIndexer
    void set(String key, Unknown /* unknown */ value);

    static Items.Builder builder() {
      return new Items.Builder();
    }

    final class Builder {
      private final Items object = Any.empty();

      private Builder() {
      }

      public Items build() {
        return object;
      }

      public Items.Builder set(String key, Unknown /* unknown */ value) {
        object.set(key, value);
        return this;
      }
    }
  }

  interface EditedItem extends Any {
    @JSIndexer
    Unknown /* unknown */ get(String key);

    @JSIndexer
    void set(String key, Unknown /* unknown */ value);

    static EditedItem.Builder builder() {
      return new EditedItem.Builder();
    }

    final class Builder {
      private final EditedItem object = Any.empty();

      private Builder() {
      }

      public EditedItem build() {
        return object;
      }

      public EditedItem.Builder set(String key, Unknown /* unknown */ value) {
        object.set(key, value);
        return this;
      }
    }
  }
}

package js.lang.external.vaadin.vaadin_grid;

import com.github.fluorumlabs.disconnect.core.annotations.Import;
import com.github.fluorumlabs.disconnect.core.annotations.NpmPackage;
import java.lang.String;
import java.lang.UnsupportedOperationException;
import javax.annotation.Nullable;
import js.lang.Any;
import js.lang.Unknown /* GridItem | undefined */;
import js.lang.Unknown /* unknown */;
import js.web.dom.HTMLElement;
import org.teavm.jso.JSBody;
import org.teavm.jso.JSIndexer;
import org.teavm.jso.JSProperty;

/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 * <a href="https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations">https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations</a>
 *
 * To modify these typings, edit the source file(s):
 * src/vaadin-grid-data-provider-mixin.js
 *
 */
@NpmPackage(
    name = "@vaadin/vaadin-grid",
    version = "^5.7.0-alpha4"
)
@Import(
    symbols = {"ItemCache as ItemCache_ItemCache"},
    module = "@vaadin/vaadin-grid/src/vaadin-grid-data-provider-mixin.js"
)
@Import(
    module = "@vaadin/vaadin-grid/src/vaadin-grid-data-provider-mixin.js"
)
public interface ItemCache extends Any {
  @JSProperty("grid")
  HTMLElement getGrid();

  @JSProperty("grid")
  void setGrid(HTMLElement value);

  @JSProperty("parentCache")
  @Nullable
  ItemCache getParentCache();

  @JSProperty("parentCache")
  void setParentCache(@Nullable ItemCache value);

  @JSProperty("parentItem")
  @Nullable
  Unknown /* GridItem | undefined */ getParentItem();

  @JSProperty("parentItem")
  void setParentItem(@Nullable ParentItem value);

  @JSProperty("parentItem")
  void setParentItem(@Nullable String value);

  @JSProperty("itemCaches")
  @Nullable
  Any getItemCaches();

  @JSProperty("itemCaches")
  void setItemCaches(@Nullable Any value);

  @JSProperty("items")
  @Nullable
  Any getItems();

  @JSProperty("items")
  void setItems(@Nullable Any value);

  @JSProperty("effectiveSize")
  double getEffectiveSize();

  @JSProperty("effectiveSize")
  void setEffectiveSize(double value);

  @JSProperty("size")
  double getSize();

  @JSProperty("size")
  void setSize(double value);

  @JSProperty("pendingRequests")
  @Nullable
  Any getPendingRequests();

  @JSProperty("pendingRequests")
  void setPendingRequests(@Nullable Any value);

  @JSBody(
      params = {"grid", "parentCache", "parentItem"},
      script = "return new ItemCache_ItemCache(grid, parentCache, parentItem)"
  )
  static ItemCache create(HTMLElement grid, @Nullable ItemCache parentCache,
      @Nullable CreateParentItem parentItem) {
    throw new UnsupportedOperationException("Available only in JavaScript");
  }

  @JSBody(
      params = {"grid", "parentCache", "parentItem"},
      script = "return new ItemCache_ItemCache(grid, parentCache, parentItem)"
  )
  static ItemCache create(HTMLElement grid, @Nullable ItemCache parentCache,
      @Nullable String parentItem) {
    throw new UnsupportedOperationException("Available only in JavaScript");
  }

  /**
   *
   */
  @JSBody(
      params = {"grid", "parentCache"},
      script = "return new ItemCache_ItemCache(grid, parentCache)"
  )
  static ItemCache create(HTMLElement grid, @Nullable ItemCache parentCache) {
    throw new UnsupportedOperationException("Available only in JavaScript");
  }

  /**
   *
   */
  @JSBody(
      params = {"grid"},
      script = "return new ItemCache_ItemCache(grid)"
  )
  static ItemCache create(HTMLElement grid) {
    throw new UnsupportedOperationException("Available only in JavaScript");
  }

  boolean isLoading();

  @Nullable
  Unknown /* GridItem | undefined */ getItemForIndex(double index);

  void updateSize();

  void ensureSubCacheForScaledIndex(double scaledIndex);

  GetCacheAndIndexResult getCacheAndIndex(double index);

  interface ParentItem extends Any {
    @JSIndexer
    Unknown /* unknown */ get(String key);

    @JSIndexer
    void set(String key, Unknown /* unknown */ value);

    class Builder {
      private final ParentItem object = Any.empty();

      public ParentItem build() {
        return object;
      }

      public ParentItem.Builder set(String key, Unknown /* unknown */ value) {
        object.set(key, value);
        return this;
      }
    }
  }

  interface CreateParentItem extends Any {
    @JSIndexer
    Unknown /* unknown */ get(String key);

    @JSIndexer
    void set(String key, Unknown /* unknown */ value);

    class Builder {
      private final CreateParentItem object = Any.empty();

      public CreateParentItem build() {
        return object;
      }

      public CreateParentItem.Builder set(String key, Unknown /* unknown */ value) {
        object.set(key, value);
        return this;
      }
    }
  }

  interface GetItemForIndexResult extends Any {
    @JSIndexer
    Unknown /* unknown */ get(String key);

    @JSIndexer
    void set(String key, Unknown /* unknown */ value);

    class Builder {
      private final GetItemForIndexResult object = Any.empty();

      public GetItemForIndexResult build() {
        return object;
      }

      public GetItemForIndexResult.Builder set(String key, Unknown /* unknown */ value) {
        object.set(key, value);
        return this;
      }
    }
  }

  interface GetCacheAndIndexResult extends Any {
    @JSProperty("cache")
    ItemCache getCache();

    @JSProperty("cache")
    void setCache(ItemCache value);

    @JSProperty("scaledIndex")
    double getScaledIndex();

    @JSProperty("scaledIndex")
    void setScaledIndex(double value);

    class Builder {
      private final GetCacheAndIndexResult object = Any.empty();

      public GetCacheAndIndexResult build() {
        return object;
      }

      public GetCacheAndIndexResult.Builder cache(ItemCache value) {
        object.setCache(value);
        return this;
      }

      public GetCacheAndIndexResult.Builder scaledIndex(double value) {
        object.setScaledIndex(value);
        return this;
      }
    }
  }
}

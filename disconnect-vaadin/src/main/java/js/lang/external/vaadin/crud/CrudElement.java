package js.lang.external.vaadin.crud;

import com.github.fluorumlabs.disconnect.core.annotations.Import;
import com.github.fluorumlabs.disconnect.core.annotations.NpmPackage;
import js.lang.Any;
import js.lang.external.vaadin.DataProvider;
import js.lang.external.vaadin.grid.GridDataProviderParams;
import js.util.collections.Array;
import js.web.dom.HTMLElement;
import org.teavm.jso.JSProperty;

import javax.annotation.Nullable;

/**
 * <code>&lt;vaadin-crud&gt;</code> is a Web Component for <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> operations.
 *
 * <h3>Quick Start</h3>
 * Assign an array to the <a href="#/elements/vaadin-crud#property-items"><code>items</code></a> property.
 *
 * A grid and an editor will be automatically generated and configured based on the data structure provided.
 *
 * <h4>Example:</h4>
 * <pre><code class="language-html">&lt;vaadin-crud items='[{"name": "John", "surname": "Lennon", "role": "singer"},
 *                       {"name": "Ringo", "surname": "Starr", "role": "drums"}]'&gt;&lt;/vaadin-crud&gt;
 * </code></pre>
 * <h3>Data Provider Function</h3>
 * Otherwise, you can provide a <a href="#/elements/vaadin-crud#property-dataProvider"><code>dataProvider</code></a> function.
 *
 * <h4>Example:</h4>
 * <pre><code class="language-html">&lt;vaadin-crud&gt;&lt;/vaadin-crud&gt;
 * </code></pre>
 * <pre><code class="language-js">const crud = document.querySelector('vaadin-crud');
 * const users = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'}, ...];
 * crud.dataProvider = function(params, callback) {
 *    const chunk = users.slice(params.page * params.pageSize, params.page * params.pageSize + params.pageSize);
 *    callback(chunk, people.length);
 * };
 * </code></pre>
 * NOTE: The autogenerated editor only supports string types. If you need to handle special cases customizing the editor is discussed below.
 *
 * <h3>Customization</h3>
 * Alternatively you can fully configure the component by using <code>slot</code> names.
 *
 * <table>
 *  <thead>
 *   <tr>
 *    <th>Slot name</th>
 *    <th>Description</th>
 *   </tr>
 *  </thead>
 *  <tbody>
 *   <tr>
 *    <td><code>grid</code></td>
 *    <td>To replace the autogenerated grid with a custom one.</td>
 *   </tr>
 *   <tr>
 *    <td><code>form</code></td>
 *    <td>To replace the autogenerated form.</td>
 *   </tr>
 *   <tr>
 *    <td><code>toolbar</code></td>
 *    <td>To replace the toolbar content. Add an element with the attribure <code>new-button</code> for the new item action.</td>
 *   </tr>
 *  </tbody>
 * </table>
 * <h4>Example:</h4>
 * <pre><code class="language-html">&lt;vaadin-crud items='[{"name": "John", "surname": "Lennon", "role": "singer"},
 *                       {"name": "Ringo", "surname": "Starr", "role": "drums"}]'&gt;
 *
 *   &lt;vaadin-grid slot="grid"&gt;
 *    &lt;vaadin-crud-edit-column&gt;&lt;/vaadin-crud-edit-column&gt;
 *    &lt;vaadin-grid-column&gt;
 *     &lt;template class="header"&gt;Name&lt;/template&gt;&lt;template&gt;[[item.name]]&lt;/template&gt;
 *    &lt;/vaadin-grid-column&gt;
 *    &lt;vaadin-grid-column&gt;
 *     &lt;template class="header"&gt;Surname&lt;/template&gt;&lt;template&gt;[[item.surname]]&lt;/template&gt;
 *    &lt;/vaadin-grid-column&gt;
 *   &lt;/vaadin-grid&gt;
 *
 *   &lt;vaadin-form-layout slot="form"&gt;
 *    &lt;vaadin-text-field label="First" path="name"&gt;&lt;/vaadin-text-field&gt;
 *    &lt;vaadin-text-field label="Surname" path="surname"&gt;&lt;/vaadin-text-field&gt;
 *   &lt;/vaadin-form-layout&gt;
 *
 *   &lt;div slot="footer"&gt;Total singers: [[size]]&lt;/div&gt;
 *
 *   &lt;button slot="new"&gt;New singer&lt;/button&gt;
 * &lt;/vaadin-crud&gt;
 * </code></pre>
 * <h3>Helpers</h3>
 * The following elements are used to autoconfigure the grid and the editor
 *
 * <ul>
 *  <li><a href="#/elements/vaadin-crud-grid"><code>&lt;vaadin-crud-grid&gt;</code></a></li>
 *  <li><a href="#/elements/vaadin-crud-edit-column"><code>&lt;vaadin-crud-edit-column&gt;</code></a></li>
 *  <li><a href="#/elements/vaadin-crud-form"><code>&lt;vaadin-crud-form&gt;</code></a></li>
 * </ul>
 * <h3>Styling</h3>
 * The following shadow DOM parts are available for styling:
 *
 * <table>
 *  <thead>
 *   <tr>
 *    <th>Part name</th>
 *    <th>Description</th>
 *   </tr>
 *  </thead>
 *  <tbody>
 *   <tr>
 *    <td><code>toolbar</code></td>
 *    <td>Toolbar container at the bottom. By default it contains the the <code>new</code> button</td>
 *   </tr>
 *  </tbody>
 * </table>
 * The following custom properties are available:
 *
 * <table>
 *  <thead>
 *   <tr>
 *    <th>Custom Property</th>
 *    <th>Description</th>
 *    <th>Default</th>
 *   </tr>
 *  </thead>
 *  <tbody>
 *   <tr>
 *    <td>--vaadin-crud-editor-max-height</td>
 *    <td>max height of editor when opened on the bottom</td>
 *    <td>40%</td>
 *   </tr>
 *   <tr>
 *    <td>--vaadin-crud-editor-max-width</td>
 *    <td>max width of editor when opened on the side</td>
 *    <td>40%</td>
 *   </tr>
 *  </tbody>
 * </table>
 * See <a href="https://github.com/vaadin/vaadin-themable-mixin/wiki">ThemableMixin â€“ how to apply styles for shadow parts</a>
 *
 * <strong>Mixins:</strong> ElementMixin, ThemableMixin, ElementMixin
 *
 * <h2>Example</h2>
 * <pre><code class="language-javascript">demo/index.html
 * </code></pre>
 */
@NpmPackage(name = "@vaadin/vaadin-crud", version = "^1.3.0-alpha2")
@Import(module = "@vaadin/vaadin-crud/vaadin-crud.js")
public interface CrudElement<T extends Any> extends HTMLElement {

    // !wca! get dataProvider: CrudDataProvider | undefined

    // !wca! set dataProvider: CrudDataProvider | undefined
    /**
     * Function that provides items lazily. Receives arguments <code>params</code>, <code>callback</code>
     *
     * <code>params.page</code> Requested page index
     * <code>params.pageSize</code> Current page size
     * <code>params.filters</code> Currently applied filters
     * <code>params.sortOrders</code> Currently applied sorting orders
     *
     * <code>callback(items, size)</code> Callback function with arguments:
     *  - <code>items</code> Current page of items
     *  - <code>size</code> Total number of items
     */
    @JSProperty("dataProvider")
    void setDataProvider(@Nullable DataProvider<GridDataProviderParams<T>, T> value);

    // !wca! get editOnClick: boolean
    /**
     * Enables user to click on row to edit it.
     * Note: When enabled, autogenerated grid won't show the edit column.
     */
    @JSProperty("editOnClick")
    boolean isEditOnClick();

    // !wca! set editOnClick: boolean
    /**
     * Enables user to click on row to edit it.
     * Note: When enabled, autogenerated grid won't show the edit column.
     */
    @JSProperty("editOnClick")
    void setEditOnClick(boolean value);

    // !wca! get editedItem: CrudItem | undefined
    /**
     * The item being edited in the dialog.
     */
    @JSProperty("editedItem")
    @Nullable
    T getEditedItem();

    // !wca! set editedItem: CrudItem | undefined
    /**
     * The item being edited in the dialog.
     */
    @JSProperty("editedItem")
    void setEditedItem(@Nullable T value);

    // !wca! get editorOpened: boolean
    /**
     * Reflects the opened status of the editor.
     */
    @JSProperty("editorOpened")
    boolean isEditorOpened();

    // !wca! set editorOpened: boolean
    /**
     * Reflects the opened status of the editor.
     */
    @JSProperty("editorOpened")
    void setEditorOpened(boolean value);

    // !wca! get editorPosition: !CrudEditorPosition
    /**
     * Sets how editor will be presented on desktop screen.
     *
     * Accepted values are:
     *  - `` (default) - form will open as overlay
     *  - <code>bottom</code> - form will open below the grid
     *  - <code>aside</code> - form will open on the grid side (<em>right</em>, if lft and <em>left</em> if rtl)
     */
    @JSProperty("editorPosition")
    String getEditorPosition();

    // !wca! set editorPosition: !CrudEditorPosition
    /**
     * Sets how editor will be presented on desktop screen.
     *
     * Accepted values are:
     *  - `` (default) - form will open as overlay
     *  - <code>bottom</code> - form will open below the grid
     *  - <code>aside</code> - form will open on the grid side (<em>right</em>, if lft and <em>left</em> if rtl)
     */
    @JSProperty("editorPosition")
    void setEditorPosition(String value);

    // !wca! get exclude: string
    /**
     * A comma-separated list of fields to be excluded from the generated grid and the generated editor.
     *
     * When <a href="#/elements/vaadin-crud#property-include"><code>include</code></a> is defined, this parameter is ignored.
     *
     * Default is to exclude all private fields (those properties starting with underscore)
     */
    @JSProperty("exclude")
    String getExclude();

    // !wca! set exclude: string
    /**
     * A comma-separated list of fields to be excluded from the generated grid and the generated editor.
     *
     * When <a href="#/elements/vaadin-crud#property-include"><code>include</code></a> is defined, this parameter is ignored.
     *
     * Default is to exclude all private fields (those properties starting with underscore)
     */
    @JSProperty("exclude")
    void setExclude(String value);

    // !wca! get i18n: !CrudI18n

    // !wca! set i18n: !CrudI18n
    /**
     * The object used to localize this component.
     * For changing the default localization, change the entire
     * <em>i18n</em> object or just the property you want to modify.
     *
     * The object has the following JSON structure and default values:
     *
     * {
     *  newItem: 'New item',
     *  editItem: 'Edit item',
     *  saveItem: 'Save',
     *  cancel: 'Cancel',
     *  deleteItem: 'Delete...',
     *  editLabel: 'Edit',
     *  confirm: {
     *  delete: {
     *  title: 'Confirm delete',
     *  content: 'Are you sure you want to delete the selected item? This action cannot be undone.',
     *  button: {
     *  confirm: 'Delete',
     *  dismiss: 'Cancel'
     *  }
     *  },
     *  cancel: {
     *  title: 'Unsaved changes',
     *  content: 'There are unsaved modifications to the item.',
     *  button: {
     *  confirm: 'Discard',
     *  dismiss: 'Continue editing'
     *  }
     *  }
     *  }
     * }
     */
    @JSProperty("i18n")
    void setI18n(CrudI18n value);

    // !wca! get include: string
    /**
     * A comma-separated list of fields to include in the generated grid and the generated editor.
     *
     * It can be used to explicitly define the field order.
     *
     * When it is defined <a href="#/elements/vaadin-crud#property-exclude"><code>exclude</code></a> is ignored.
     *
     * Default is undefined meaning that all properties in the object should be mapped to fields.
     */
    @JSProperty("include")
    String getInclude();

    // !wca! set include: string
    /**
     * A comma-separated list of fields to include in the generated grid and the generated editor.
     *
     * It can be used to explicitly define the field order.
     *
     * When it is defined <a href="#/elements/vaadin-crud#property-exclude"><code>exclude</code></a> is ignored.
     *
     * Default is undefined meaning that all properties in the object should be mapped to fields.
     */
    @JSProperty("include")
    void setInclude(String value);

    // !wca! get items: Array<!CrudItem> | undefined
    /**
     * An array containing the items which will be stamped to the column template instances.
     */
    @JSProperty("items")
    @Nullable
    Array<T> getItems();

    // !wca! set items: Array<!CrudItem> | undefined
    /**
     * An array containing the items which will be stamped to the column template instances.
     */
    @JSProperty("items")
    void setItems(@Nullable Array<T> value);

    // !wca! get noFilter: boolean
    /**
     * Disable filtering when grid is autoconfigured.
     */
    @JSProperty("noFilter")
    boolean isNoFilter();

    // !wca! set noFilter: boolean
    /**
     * Disable filtering when grid is autoconfigured.
     */
    @JSProperty("noFilter")
    void setNoFilter(boolean value);

    // !wca! get noHead: boolean
    /**
     * Remove grid headers when it is autoconfigured.
     */
    @JSProperty("noHead")
    boolean isNoHead();

    // !wca! set noHead: boolean
    /**
     * Remove grid headers when it is autoconfigured.
     */
    @JSProperty("noHead")
    void setNoHead(boolean value);

    // !wca! get noSort: boolean
    /**
     * Disable sorting when grid is autoconfigured.
     */
    @JSProperty("noSort")
    boolean isNoSort();

    // !wca! set noSort: boolean
    /**
     * Disable sorting when grid is autoconfigured.
     */
    @JSProperty("noSort")
    void setNoSort(boolean value);

    // !wca! get size: number
    /**
     * Number of items in the data set which is reported by the grid.
     * Typically it reflects the number of filtered items displayed in the grid.
     */
    @JSProperty("size")
    int getSize();

    // !wca! set size: number
    /**
     * Number of items in the data set which is reported by the grid.
     * Typically it reflects the number of filtered items displayed in the grid.
     */
    @JSProperty("size")
    void setSize(int value);

    // !wca! get theme: string | null | undefined
}

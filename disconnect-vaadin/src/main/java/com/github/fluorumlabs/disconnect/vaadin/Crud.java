package com.github.fluorumlabs.disconnect.vaadin;

import com.github.fluorumlabs.disconnect.core.annotations.WebComponent;
import com.github.fluorumlabs.disconnect.polymer.types.BooleanPropertyChangeEvent;
import com.github.fluorumlabs.disconnect.polymer.types.IntPropertyChangeEvent;
import com.github.fluorumlabs.disconnect.polymer.types.PropertyChangeEvent;
import com.github.fluorumlabs.disconnect.vaadin.constants.CrudEditorPosition;
import com.github.fluorumlabs.disconnect.vaadin.dataproviders.GridDataProvider;
import com.github.fluorumlabs.disconnect.vaadin.elements.CrudElement;
import com.github.fluorumlabs.disconnect.vaadin.i18n.CrudI18n;
import com.github.fluorumlabs.disconnect.vaadin.mixins.HasElementMixin;
import com.github.fluorumlabs.disconnect.vaadin.mixins.HasThemableMixin;
import com.github.fluorumlabs.disconnect.vaadin.types.ItemEvent;
import com.github.fluorumlabs.disconnect.vaadin.types.ThemeVariant;
import com.github.fluorumlabs.disconnect.zero.component.*;
import com.github.fluorumlabs.disconnect.zero.observable.ObservableEvent;
import js.extras.JsEnum;
import js.lang.Any;
import js.util.collections.Array;

import javax.annotation.Nullable;

/**
 * <code>&lt;vaadin-crud&gt;</code> is a Web Component for
 * <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> operations.
 *
 * <h3>Quick Start</h3>
 * Assign an array to the <a href="#/elements/vaadin-crud#property-items"><code>items</code></a> property.
 * <p>
 * A grid and an editor will be automatically generated and configured based on the data structure provided.
 *
 * <h4>Example:</h4>
 * <pre><code class="language-html">&lt;vaadin-crud items='[{&quot;name&quot;: &quot;John&quot;, &quot;surname&quot;:
 * &quot;Lennon&quot;, &quot;role&quot;: &quot;singer&quot;},
 *                      {&quot;name&quot;: &quot;Ringo&quot;, &quot;surname&quot;: &quot;Starr&quot;, &quot;
 *                      role&quot;: &quot;drums&quot;}]'&gt;&lt;/vaadin-crud&gt;
 * </code></pre>
 * <h3>Data Provider Function</h3>
 * Otherwise, you can provide a <a href="#/elements/vaadin-crud#property-dataProvider"><code>dataProvider</code></a>
 * function.
 *
 * <h4>Example:</h4>
 * <pre><code class="language-html">&lt;vaadin-crud&gt;&lt;/vaadin-crud&gt;
 * </code></pre>
 * <pre><code class="language-js">const crud = document.querySelector('vaadin-crud');
 * const users = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'}, ...];
 * crud.dataProvider = function(params, callback) {
 *   const chunk = users.slice(params.page * params.pageSize, params.page * params.pageSize + params.pageSize);
 *   callback(chunk, people.length);
 * };
 * </code></pre>
 * NOTE: The autogenerated editor only supports string types. If you need to handle special cases
 * customizing the editor is discussed below.
 *
 * <h3>Customization</h3>
 * Alternatively you can fully configure the component by using <code>slot</code> names.
 *
 * <table>
 * <thead>
 * <tr><th>Slot name</th><th>Description</th></tr>
 * </thead>
 * <tbody>
 * <tr><td><code>grid</code></td><td>To replace the autogenerated grid with a custom one.</td></tr>
 * <tr><td><code>form</code></td><td>To replace the autogenerated form.</td></tr>
 * <tr><td><code>toolbar</code></td><td>To replace the toolbar content. Add an element with the attribure
 * <code>new-button</code> for the new item action.</td></tr>
 * <tr><td><code>new</code></td><td>For customizing the 'new item' button.</td></tr>
 * </tbody>
 * </table>
 * <h4>Example:</h4>
 * <pre><code class="language-html">&lt;vaadin-crud items='[{&quot;name&quot;: &quot;John&quot;, &quot;surname&quot;:
 * &quot;Lennon&quot;, &quot;role&quot;: &quot;singer&quot;},
 *                      {&quot;name&quot;: &quot;Ringo&quot;, &quot;surname&quot;: &quot;Starr&quot;, &quot;
 *                      role&quot;: &quot;drums&quot;}]'&gt;
 *
 *  &lt;vaadin-grid slot=&quot;grid&quot;&gt;
 *   &lt;vaadin-crud-edit-column&gt;&lt;/vaadin-crud-edit-column&gt;
 *   &lt;vaadin-grid-column&gt;
 *    &lt;template class=&quot;header&quot;&gt;Name&lt;/template&gt;&lt;template&gt;[[item.name]]&lt;/template&gt;
 *   &lt;/vaadin-grid-column&gt;
 *   &lt;vaadin-grid-column&gt;
 *    &lt;template class=&quot;header&quot;&gt;Surname&lt;/template&gt;&lt;template&gt;[[item.surname]]&lt;/template&gt;
 *   &lt;/vaadin-grid-column&gt;
 *  &lt;/vaadin-grid&gt;
 *
 *  &lt;vaadin-form-layout slot=&quot;form&quot;&gt;
 *   &lt;vaadin-text-field label=&quot;First&quot; path=&quot;name&quot;&gt;&lt;/vaadin-text-field&gt;
 *   &lt;vaadin-text-field label=&quot;Surname&quot; path=&quot;surname&quot;&gt;&lt;/vaadin-text-field&gt;
 *  &lt;/vaadin-form-layout&gt;
 *
 *  &lt;div slot=&quot;footer&quot;&gt;Total singers: [[size]]&lt;/div&gt;
 *
 *  &lt;button slot=&quot;new&quot;&gt;New singer&lt;/button&gt;
 * &lt;/vaadin-crud&gt;
 * </code></pre>
 * <h3>Helpers</h3>
 * The following elements are used to autoconfigure the grid and the editor
 *
 * <ul>
 * <li><a href="#/elements/vaadin-crud-grid"><code>&lt;vaadin-crud-grid&gt;</code></a></li>
 * <li><a href="#/elements/vaadin-crud-edit-column"><code>&lt;vaadin-crud-edit-column&gt;</code></a></li>
 * <li><a href="#/elements/vaadin-crud-form"><code>&lt;vaadin-crud-form&gt;</code></a></li>
 * </ul>
 * <h3>Styling</h3>
 * The following shadow DOM parts are available for styling:
 *
 * <table>
 * <thead>
 * <tr><th>Part name</th><th>Description</th></tr>
 * </thead>
 * <tbody>
 * <tr><td><code>toolbar</code></td><td>Toolbar container at the bottom. By default it contains the the
 * <code>new</code> button</td></tr>
 * </tbody>
 * </table>
 * The following custom properties are available:
 *
 * <table>
 * <thead>
 * <tr><th>Custom Property</th><th>Description</th><th>Default</th></tr>
 * </thead>
 * <tbody>
 * <tr><td>--vaadin-crud-editor-max-height</td><td>max height of editor when opened on the bottom</td><td>40%</td></tr>
 * <tr><td>--vaadin-crud-editor-max-width</td><td>max width of editor when opened on the side</td><td>40%</td></tr>
 * </tbody>
 * </table>
 * See
 * <a href="https://github.com/vaadin/vaadin-themable-mixin/wiki">ThemableMixin â€“ how to apply styles for shadow parts</a>
 */
@WebComponent
public class Crud<ITEM extends Any> extends AbstractComponent<CrudElement<ITEM>>
		implements HasElementMixin<CrudElement<ITEM>, Crud<ITEM>>,
		HasThemableMixin<Crud.Variant, CrudElement<ITEM>, Crud<ITEM>>,
		HasSlots<CrudElement<ITEM>>,
		HasStyle<CrudElement<ITEM>, Crud<ITEM>>, HasComponents<CrudElement<ITEM>, Crud<ITEM>, HasElement<?>> {
	public Crud() {
		super(CrudElement.TAGNAME());
	}

	/**
	 * An array containing the items which will be stamped to the column template instances.
	 */
	@Nullable
	public Array<ITEM> items() {
		return getNode().getItems();
	}

	/**
	 * An array containing the items which will be stamped to the column template instances.
	 */
	public Crud<ITEM> items(ITEM... items) {
		getNode().setItems(items);
		return this;
	}

	public Crud<ITEM> items(Array<ITEM> items) {
		getNode().setItems(items);
		return this;
	}

	/**
	 * The item being edited in the dialog.
	 */
	@Nullable
	public ITEM editedItem() {
		return getNode().getEditedItem();
	}

	/**
	 * The item being edited in the dialog.
	 */
	public Crud<ITEM> editedItem(ITEM editedItem) {
		getNode().setEditedItem(editedItem);
		return this;
	}

	/**
	 * Sets how editor will be presented on desktop screen.
	 * <p>
	 * Accepted values are:
	 *
	 * <ul>
	 * <li>`` (default) - form will open as overlay</li>
	 * <li><code>bottom</code> - form will open below the grid</li>
	 * <li><code>aside</code> - form will open on the grid side (<em>right</em>, if lft and <em>left</em> if rtl)</li>
	 * </ul>
	 */
	@Nullable
	public CrudEditorPosition editorPosition() {
		return getNode().getEditorPosition();
	}

	/**
	 * Sets how editor will be presented on desktop screen.
	 * <p>
	 * Accepted values are:
	 *
	 * <ul>
	 * <li>`` (default) - form will open as overlay</li>
	 * <li><code>bottom</code> - form will open below the grid</li>
	 * <li><code>aside</code> - form will open on the grid side (<em>right</em>, if lft and <em>left</em> if rtl)</li>
	 * </ul>
	 */
	public Crud<ITEM> editorPosition(CrudEditorPosition editorPosition) {
		getNode().setEditorPosition(editorPosition);
		return this;
	}

	/**
	 * Enables user to click on row to edit it.
	 * Note: When enabled, autogenerated grid won't show the edit column.
	 */
	public boolean editOnClick() {
		return getNode().isEditOnClick();
	}

	/**
	 * Enables user to click on row to edit it.
	 * Note: When enabled, autogenerated grid won't show the edit column.
	 */
	public Crud<ITEM> editOnClick(boolean editOnClick) {
		getNode().setEditOnClick(editOnClick);
		return this;
	}

	/**
	 * Function that provides items lazily. Receives arguments <code>params</code>, <code>callback</code>
	 *
	 * <code>params.page</code> Requested page index
	 * <code>params.pageSize</code> Current page size
	 * <code>params.filters</code> Currently applied filters
	 * <code>params.sortOrders</code> Currently applied sorting orders
	 *
	 * <code>callback(items, size)</code> Callback function with arguments:
	 *
	 * <ul>
	 * <li><code>items</code> Current page of items</li>
	 * <li><code>size</code> Total number of items</li>
	 * </ul>
	 */
	@Nullable
	public GridDataProvider<ITEM> dataProvider() {
		return getNode().getDataProvider();
	}

	/**
	 * Function that provides items lazily. Receives arguments <code>params</code>, <code>callback</code>
	 *
	 * <code>params.page</code> Requested page index
	 * <code>params.pageSize</code> Current page size
	 * <code>params.filters</code> Currently applied filters
	 * <code>params.sortOrders</code> Currently applied sorting orders
	 *
	 * <code>callback(items, size)</code> Callback function with arguments:
	 *
	 * <ul>
	 * <li><code>items</code> Current page of items</li>
	 * <li><code>size</code> Total number of items</li>
	 * </ul>
	 */
	public Crud<ITEM> dataProvider(GridDataProvider<ITEM> dataProvider) {
		getNode().setDataProvider(dataProvider);
		return this;
	}

	/**
	 * Disable filtering when grid is autofonfigured.
	 */
	public boolean noFilter() {
		return getNode().isNoFilter();
	}

	/**
	 * Disable filtering when grid is autofonfigured.
	 */
	public Crud<ITEM> noFilter(boolean noFilter) {
		getNode().setNoFilter(noFilter);
		return this;
	}

	/**
	 * Disable sorting when grid is autofonfigured.
	 */
	public boolean noSort() {
		return getNode().isNoSort();
	}

	/**
	 * Disable sorting when grid is autofonfigured.
	 */
	public Crud<ITEM> noSort(boolean noSort) {
		getNode().setNoSort(noSort);
		return this;
	}

	/**
	 * Remove grid headers when it is autoconfigured.
	 */
	public boolean noHead() {
		return getNode().isNoHead();
	}

	/**
	 * Remove grid headers when it is autoconfigured.
	 */
	public Crud<ITEM> noHead(boolean noHead) {
		getNode().setNoHead(noHead);
		return this;
	}

	/**
	 * A comma-separated list of fields to include in the generated grid and the generated editor.
	 * <p>
	 * It can be used to explicitly define the field order.
	 * <p>
	 * When it is defined <a href="#/elements/vaadin-crud#property-exclude"><code>exclude</code></a> is ignored.
	 * <p>
	 * Default is undefined meaning that all properties in the object should be mapped to fields.
	 */
	@Nullable
	public String include() {
		return getNode().getInclude();
	}

	/**
	 * A comma-separated list of fields to include in the generated grid and the generated editor.
	 * <p>
	 * It can be used to explicitly define the field order.
	 * <p>
	 * When it is defined <a href="#/elements/vaadin-crud#property-exclude"><code>exclude</code></a> is ignored.
	 * <p>
	 * Default is undefined meaning that all properties in the object should be mapped to fields.
	 */
	public Crud<ITEM> include(String include) {
		getNode().setInclude(include);
		return this;
	}

	/**
	 * A comma-separated list of fields to be excluded from the generated grid and the generated editor.
	 * <p>
	 * When <a href="#/elements/vaadin-crud#property-include"><code>include</code></a>
	 * is defined, this parameter is ignored.
	 * <p>
	 * Default is to exclude all private fields (those properties starting with underscore)
	 */
	@Nullable
	public String exclude() {
		return getNode().getExclude();
	}

	/**
	 * A comma-separated list of fields to be excluded from the generated grid and the generated editor.
	 * <p>
	 * When <a href="#/elements/vaadin-crud#property-include"><code>include</code></a>
	 * is defined, this parameter is ignored.
	 * <p>
	 * Default is to exclude all private fields (those properties starting with underscore)
	 */
	public Crud<ITEM> exclude(String exclude) {
		getNode().setExclude(exclude);
		return this;
	}

	/**
	 * Reflects the opened status of the editor.
	 */
	public boolean editorOpened() {
		return getNode().isEditorOpened();
	}

	/**
	 * Reflects the opened status of the editor.
	 */
	public Crud<ITEM> editorOpened(boolean editorOpened) {
		getNode().setEditorOpened(editorOpened);
		return this;
	}

	/**
	 * Number of items in the data set which is reported by the grid.
	 * Typically it reflects the number of filtered items displayed in the grid.
	 */
	public double size() {
		return getNode().getSize();
	}

	/**
	 * The object used to localize this component.
	 * For changing the default localization, change the entire
	 * <em>i18n</em> object or just the property you want to modify.
	 * <p>
	 * The object has the following JSON structure and default values:
	 *
	 * <pre><code>    {
	 *       newItem: 'New item',
	 *       editItem: 'Edit item',
	 *       saveItem: 'Save',
	 *       cancel: 'Cancel',
	 *       deleteItem: 'Delete...',
	 *       editLabel: 'Edit',
	 *       confirm: {
	 *         delete: {
	 *           title: 'Confirm delete',
	 *           content: 'Are you sure you want to delete the selected item? This action cannot be undone.',
	 *           button: {
	 *             confirm: 'Delete',
	 *             dismiss: 'Cancel'
	 *           }
	 *         },
	 *         cancel: {
	 *           title: 'Unsaved changes',
	 *           content: 'There are unsaved modifications to the item.',
	 *           button: {
	 *             confirm: 'Discard',
	 *             dismiss: 'Continue editing'
	 *           }
	 *         }
	 *       }
	 *     }
	 * </code></pre>
	 */
	@Nullable
	public CrudI18n i18n() {
		return getNode().getI18n();
	}

	/**
	 * The object used to localize this component.
	 * For changing the default localization, change the entire
	 * <em>i18n</em> object or just the property you want to modify.
	 * <p>
	 * The object has the following JSON structure and default values:
	 *
	 * <pre><code>    {
	 *       newItem: 'New item',
	 *       editItem: 'Edit item',
	 *       saveItem: 'Save',
	 *       cancel: 'Cancel',
	 *       deleteItem: 'Delete...',
	 *       editLabel: 'Edit',
	 *       confirm: {
	 *         delete: {
	 *           title: 'Confirm delete',
	 *           content: 'Are you sure you want to delete the selected item? This action cannot be undone.',
	 *           button: {
	 *             confirm: 'Delete',
	 *             dismiss: 'Cancel'
	 *           }
	 *         },
	 *         cancel: {
	 *           title: 'Unsaved changes',
	 *           content: 'There are unsaved modifications to the item.',
	 *           button: {
	 *             confirm: 'Discard',
	 *             dismiss: 'Continue editing'
	 *           }
	 *         }
	 *       }
	 *     }
	 * </code></pre>
	 */
	public Crud<ITEM> i18n(CrudI18n i18n) {
		getNode().setI18n(i18n);
		return this;
	}

	/**
	 * Fired when user discards edition. If the default is prevented, then
	 * no action is performed, user is responsible to close dialog and reset
	 * item and grid.
	 */
	public ObservableEvent<ItemEvent<ITEM>> crudCancelEvent() {
		return createEvent("cancel");
	}

	/**
	 * Fired when user wants to delete item. If the default is prevented, then
	 * no action is performed, items array is not modified nor dialog closed
	 */
	public ObservableEvent<ItemEvent<ITEM>> crudDeleteEvent() {
		return createEvent("delete");
	}

	/**
	 * Fired when user wants to edit an existing item. If the default is prevented, then
	 * a new item is not assigned to the form, giving that responsibility to the app, though
	 * dialog is always opened.
	 */
	public ObservableEvent<ItemEvent<ITEM>> crudEditEvent() {
		return createEvent("edit");
	}

	/**
	 * Fired when user wants to create a new item.
	 */
	public ObservableEvent<ItemEvent<ITEM>> crudNewEvent() {
		return createEvent("new");
	}

	/**
	 * Fired when user wants to save a new or an existing item. If the default is prevented, then
	 * no action is performed, items array is not modified nor dialog closed
	 */
	public ObservableEvent<ItemEvent<ITEM>> crudSaveEvent() {
		return createEvent("save");
	}

	/**
	 * Fired when the <code>items</code> property changes.
	 */
	public ObservableEvent<PropertyChangeEvent<Array<ITEM>>> itemsChangedEvent() {
		return createEvent("items-changed");
	}

	/**
	 * Fired when the <code>editorOpened</code> property changes.
	 */
	public ObservableEvent<BooleanPropertyChangeEvent> editorOpenedChangedEvent() {
		return createEvent("editor-opened-changed");
	}

	/**
	 * Fired when the <code>size</code> property changes.
	 */
	public ObservableEvent<IntPropertyChangeEvent> sizeChangedEvent() {
		return createEvent("size-changed");
	}

	public HasSlots.Container gridSlot() {
		return slotted("grid");
	}

	public HasSlots.Container toolbarSlot() {
		return slotted("toolbar");
	}

	public HasSlots.Container formSlot() {
		return slotted("form");
	}

	public abstract static class Variant extends ThemeVariant {
		public static final Variant NO_BORDER = JsEnum.of("no-border");
	}

}

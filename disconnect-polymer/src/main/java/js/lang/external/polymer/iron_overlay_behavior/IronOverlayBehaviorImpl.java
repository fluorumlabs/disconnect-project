package js.lang.external.polymer.iron_overlay_behavior;

import com.github.fluorumlabs.disconnect.core.annotations.Import;
import com.github.fluorumlabs.disconnect.core.annotations.NpmPackage;
import java.lang.String;
import javax.annotation.Nullable;
import js.lang.Any;
import js.web.dom.Element;
import js.web.dom.Event;
import org.teavm.jso.JSProperty;

/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 * https: *
 * To modify these typings, edit the source file(s):
 * iron-overlay-behavior.js
 *
 */
@NpmPackage(
    name = "@polymer/iron-overlay-behavior",
    version = "^3.0.3"
)
@Import(
    module = "@polymer/iron-overlay-behavior/iron-overlay-behavior.js"
)
public interface IronOverlayBehaviorImpl extends Any {
  /**
   * True if the overlay is currently displayed.
   *
   */
  @JSProperty("opened")
  boolean getOpened();

  /**
   * True if the overlay is currently displayed.
   *
   */
  @JSProperty("opened")
  void setOpened(boolean value);

  /**
   * True if the overlay was canceled when it was last closed.
   *
   */
  @JSProperty("canceled")
  boolean getCanceled();

  /**
   * Set to true to display a backdrop behind the overlay. It traps the focus
   * within the light DOM of the overlay.
   *
   */
  @JSProperty("withBackdrop")
  boolean getWithBackdrop();

  /**
   * Set to true to display a backdrop behind the overlay. It traps the focus
   * within the light DOM of the overlay.
   *
   */
  @JSProperty("withBackdrop")
  void setWithBackdrop(boolean value);

  /**
   * Set to true to disable auto-focusing the overlay or child nodes with
   * the <code>autofocus</code> attribute` when the overlay is opened.
   *
   */
  @JSProperty("noAutoFocus")
  boolean getNoAutoFocus();

  /**
   * Set to true to disable auto-focusing the overlay or child nodes with
   * the <code>autofocus</code> attribute` when the overlay is opened.
   *
   */
  @JSProperty("noAutoFocus")
  void setNoAutoFocus(boolean value);

  /**
   * Set to true to disable canceling the overlay with the ESC key.
   *
   */
  @JSProperty("noCancelOnEscKey")
  boolean getNoCancelOnEscKey();

  /**
   * Set to true to disable canceling the overlay with the ESC key.
   *
   */
  @JSProperty("noCancelOnEscKey")
  void setNoCancelOnEscKey(boolean value);

  /**
   * Set to true to disable canceling the overlay by clicking outside it.
   *
   */
  @JSProperty("noCancelOnOutsideClick")
  boolean getNoCancelOnOutsideClick();

  /**
   * Set to true to disable canceling the overlay by clicking outside it.
   *
   */
  @JSProperty("noCancelOnOutsideClick")
  void setNoCancelOnOutsideClick(boolean value);

  /**
   * Contains the reason(s) this overlay was last closed (see
   * <code>iron-overlay-closed</code>). <code>IronOverlayBehavior</code> provides the <code>canceled</code>
   * reason; implementers of the behavior can provide other reasons in
   * addition to <code>canceled</code>.
   *
   */
  @JSProperty("closingReason")
  @Nullable
  Any getClosingReason();

  /**
   * Contains the reason(s) this overlay was last closed (see
   * <code>iron-overlay-closed</code>). <code>IronOverlayBehavior</code> provides the <code>canceled</code>
   * reason; implementers of the behavior can provide other reasons in
   * addition to <code>canceled</code>.
   *
   */
  @JSProperty("closingReason")
  void setClosingReason(@Nullable Any value);

  /**
   * Set to true to enable restoring of focus when overlay is closed.
   *
   */
  @JSProperty("restoreFocusOnClose")
  boolean getRestoreFocusOnClose();

  /**
   * Set to true to enable restoring of focus when overlay is closed.
   *
   */
  @JSProperty("restoreFocusOnClose")
  void setRestoreFocusOnClose(boolean value);

  /**
   * Set to true to allow clicks to go through overlays.
   * When the user clicks outside this overlay, the click may
   * close the overlay below.
   *
   */
  @JSProperty("allowClickThrough")
  boolean getAllowClickThrough();

  /**
   * Set to true to allow clicks to go through overlays.
   * When the user clicks outside this overlay, the click may
   * close the overlay below.
   *
   */
  @JSProperty("allowClickThrough")
  void setAllowClickThrough(boolean value);

  /**
   * Set to true to keep overlay always on top.
   *
   */
  @JSProperty("alwaysOnTop")
  boolean getAlwaysOnTop();

  /**
   * Set to true to keep overlay always on top.
   *
   */
  @JSProperty("alwaysOnTop")
  void setAlwaysOnTop(boolean value);

  /**
   * Determines which action to perform when scroll outside an opened overlay
   * happens. Possible values: lock - blocks scrolling from happening, refit -
   * computes the new position on the overlay cancel - causes the overlay to
   * close
   *
   */
  @JSProperty("scrollAction")
  @Nullable
  String getScrollAction();

  /**
   * Determines which action to perform when scroll outside an opened overlay
   * happens. Possible values: lock - blocks scrolling from happening, refit -
   * computes the new position on the overlay cancel - causes the overlay to
   * close
   *
   */
  @JSProperty("scrollAction")
  void setScrollAction(@Nullable String value);

  /**
   * The backdrop element.
   *
   */
  @JSProperty("backdropElement")
  Element getBackdropElement();

  /**
   * Array of nodes that can receive focus (overlay included), ordered by
   * <code>tabindex</code>. This is used to retrieve which is the first and last focusable
   * nodes in order to wrap the focus for overlays <code>with-backdrop</code>.
   *
   * If you know what is your content (specifically the first and last focusable
   * children), you can override this method to return only <code>[firstFocusable, lastFocusable];</code>
   *
   */
  void ready();

  void attached();

  void detached();

  /**
   * Toggle the opened state of the overlay.
   *
   */
  void toggle();

  /**
   * Open the overlay.
   *
   */
  void open();

  /**
   * Close the overlay.
   *
   */
  void close();

  /**
   * Cancels the overlay.
   *
   * @param event The original event
   *
   */
  void cancel(@Nullable Event event);

  /**
   * Cancels the overlay.
   *
   */
  void cancel();

  /**
   * Invalidates the cached tabbable nodes. To be called when any of the
   * focusable content changes (e.g. a button is disabled).
   *
   */
  void invalidateTabbables();
}
